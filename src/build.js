const fs = require('fs');
const path = require('path');
const { HtmlGenerator } = require('./index.js');

/**
 * Build script that generates static HTML files for distribution
 */
function ensureDirectoryExists(dirPath) {
    if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
        console.log(`📁 Created directory: ${dirPath}`);
    }
}

function generateBuildReport() {
    console.log('🔨 Starting build process...');
    
    const startTime = Date.now();
    const distDir = path.join(__dirname, '..', 'dist');
    
    // Ensure dist directory exists
    ensureDirectoryExists(distDir);
    
    // Generate main HTML file
    const generator = new HtmlGenerator();
    generator
        .addContent('🎉 This page was generated by the Jenkins Assignment build process!')
        .addContent('The build system successfully compiled the Node.js application.')
        .addContent('This HTML file serves as both the application output and a build report.')
        .addContent(`Build started at: ${new Date().toLocaleString()}`)
        .addContent('All build steps completed without errors.');

    const mainHtml = generator.generateHtml();
    const indexPath = path.join(distDir, 'index.html');
    fs.writeFileSync(indexPath, mainHtml);
    console.log(`✅ Generated: ${indexPath}`);
    
    // Generate build report
    const buildTime = Date.now() - startTime;
    const reportGenerator = new HtmlGenerator();
    reportGenerator.title = 'Build Report - Jenkins Assignment';
    reportGenerator
        .addContent(`📊 Build Statistics`)
        .addContent(`Build Duration: ${buildTime}ms`)
        .addContent(`Output Files: 2 HTML files`)
        .addContent(`Build Status: SUCCESS`)
        .addContent(`Node.js Version: ${process.version}`)
        .addContent(`Platform: ${process.platform}`)
        .addContent(`Architecture: ${process.arch}`);

    const reportHtml = reportGenerator.generateHtml();
    const reportPath = path.join(distDir, 'build-report.html');
    fs.writeFileSync(reportPath, reportHtml);
    console.log(`📋 Generated build report: ${reportPath}`);
    
    // Create a simple manifest file
    const manifest = {
        buildTime: new Date().toISOString(),
        duration: `${buildTime}ms`,
        files: ['index.html', 'build-report.html'],
        status: 'SUCCESS',
        nodeVersion: process.version
    };
    
    const manifestPath = path.join(distDir, 'manifest.json');
    fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
    console.log(`📄 Generated manifest: ${manifestPath}`);
    
    console.log(`🎯 Build completed successfully in ${buildTime}ms`);
    console.log(`📦 Output directory: ${distDir}`);
    
    return {
        success: true,
        duration: buildTime,
        outputDir: distDir,
        files: ['index.html', 'build-report.html', 'manifest.json']
    };
}

if (require.main === module) {
    try {
        const result = generateBuildReport();
        console.log('✨ Build process finished successfully!');
        process.exit(0);
    } catch (error) {
        console.error('❌ Build failed:', error.message);
        process.exit(1);
    }
}

module.exports = { generateBuildReport };